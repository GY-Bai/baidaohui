version: '3.8'

networks:
  baidaohui-network:
    driver: bridge

services:
  # Redis缓存服务 - 无需密码的本地Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # API网关 - Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: baidaohui-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/api.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/logs:/var/log/nginx
      - ./ssl/origin.pem:/etc/ssl/origin.pem:ro
      - ./ssl/origin-key.pem:/etc/ssl/origin-key.pem:ro
    depends_on:
      - auth-service
      - sso-service
      - chat-service
      - ecommerce-api-service
      - invite-service
      - payment-service
      - key-service
      - static-api-service
      - ai-proxy-service
    networks:
      - baidaohui-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # 认证服务
  auth-service:
    image: baidaohui-auth-service:latest
    container_name: auth-service
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - MONGODB_URI=${MONGODB_URI}
    depends_on:
      - redis
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # SSO统一认证服务
  sso-service:
    image: baidaohui-sso-service:latest
    container_name: sso-service
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=production
      - PORT=5002
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    depends_on:
      - redis
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # 聊天服务
  chat-service:
    image: baidaohui-chat-service:latest
    container_name: chat-service
    ports:
      - "5003:5003"
    environment:
      - NODE_ENV=production
      - PORT=5003
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 电商API服务
  ecommerce-api-service:
    image: baidaohui-ecommerce-api-service:latest
    container_name: ecommerce-api-service
    ports:
      - "5005:5004"
    environment:
      - NODE_ENV=production
      - PORT=5005
      - MONGODB_URI=${MONGODB_URI}
      - R2_ACCESS_KEY=${R2_ACCESS_KEY}
      - R2_SECRET_KEY=${R2_SECRET_KEY}
      - R2_BUCKET=${R2_BUCKET}
      - R2_ENDPOINT=${R2_ENDPOINT}
    depends_on:
      - redis
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 192M

  # 邀请服务
  invite-service:
    image: baidaohui-invite-service:latest
    container_name: invite-service
    ports:
      - "5006:5006"
    environment:
      - NODE_ENV=production
      - PORT=5006
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 192M
        reservations:
          memory: 96M

  # 支付服务
  payment-service:
    image: baidaohui-payment-service:latest
    container_name: payment-service
    ports:
      - "5008:5008"
    environment:
      - NODE_ENV=production
      - PORT=5008
      - MONGODB_URI=${MONGODB_URI}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # 密钥管理服务
  key-service:
    image: baidaohui-key-service:latest
    container_name: key-service
    ports:
      - "5013:5009"
    environment:
      - NODE_ENV=production
      - PORT=5009
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 192M
        reservations:
          memory: 96M

  # 静态API缓存服务
  static-api-service:
    image: baidaohui-static-api-service:latest
    container_name: static-api-service
    ports:
      - "5010:5010"
    environment:
      - NODE_ENV=production
      - PORT=5010
      - MONGODB_URI=${MONGODB_URI}
      - R2_ACCESS_KEY=${R2_ACCESS_KEY}
      - R2_SECRET_KEY=${R2_SECRET_KEY}
      - R2_BUCKET=${R2_BUCKET}
      - R2_ENDPOINT=${R2_ENDPOINT}
    depends_on:
      - redis
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # AI代理服务
  ai-proxy-service:
    image: baidaohui-ai-proxy-service:latest
    container_name: ai-proxy-service
    ports:
      - "5012:5012"
    environment:
      - NODE_ENV=production
      - AI_PROXY_PORT=5012
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
      - DEFAULT_MODEL=${DEFAULT_AI_MODEL:-deepseek/deepseek-r1-0528:free}
    networks:
      - baidaohui-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  redis_data:

networks:
  baidaohui-network:
    driver: bridge 