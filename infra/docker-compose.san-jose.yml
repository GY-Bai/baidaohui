version: '3.8'

networks:
  baidaohui-network:
    driver: bridge

services:
  # Redis缓存服务 - 无需密码的本地Redis
  redis:
    image: redis:alpine
    container_name: baidaohui-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - baidaohui-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API网关 - Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: baidaohui-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-service
      - sso-service
      - chat-service
      - ecommerce-service
      - payment-service
    networks:
      - baidaohui-network

  # 认证服务
  auth-service:
    image: ${DOCKER_REGISTRY:-your-registry}/baidaohui-auth-service:${IMAGE_TAG:-latest}
    container_name: auth-service
    environment:
      # 外部API配置 - 从.env文件读取
      - MONGODB_URI=${MONGODB_URI}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      # 内部配置 - Docker中自动配置
      - NODE_ENV=production
      - PORT=5001
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-auto-generated-jwt-secret}
      - SSO_SERVICE_URL=http://sso-service:5002
    depends_on:
      - redis
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # SSO统一认证服务
  sso-service:
    image: ${DOCKER_REGISTRY:-your-registry}/baidaohui-sso-service:${IMAGE_TAG:-latest}
    container_name: sso-service
    environment:
      # 外部API配置
      - MONGODB_URI=${MONGODB_URI}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      # 内部配置
      - NODE_ENV=production
      - PORT=5002
      - JWT_SECRET=${JWT_SECRET:-auto-generated-jwt-secret}
      - DOMAIN=baidaohui.com
      - CORS_ORIGINS=https://baidaohui.com,https://fan.baidaohui.com,https://member.baidaohui.com,https://master.baidaohui.com,https://firstmate.baidaohui.com,https://seller.baidaohui.com
    depends_on:
      - redis
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # 聊天服务
  chat-service:
    image: ${DOCKER_REGISTRY:-your-registry}/baidaohui-chat-service:${IMAGE_TAG:-latest}
    container_name: chat-service
    environment:
      # 外部API配置
      - MONGODB_URI=${MONGODB_URI}
      - R2_ACCESS_KEY=${R2_ACCESS_KEY}
      - R2_SECRET_KEY=${R2_SECRET_KEY}
      - R2_BUCKET=${R2_BUCKET}
      - R2_ENDPOINT=${R2_ENDPOINT}
      # 内部配置
      - NODE_ENV=production
      - PORT=5003
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-auto-generated-jwt-secret}
      - CHAT_HISTORY_LIMIT=100
      - PRIVATE_CHAT_ENABLED=true
    depends_on:
      - redis
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 电商API服务
  ecommerce-service:
    image: ${DOCKER_REGISTRY:-your-registry}/baidaohui-ecommerce-service:${IMAGE_TAG:-latest}
    container_name: ecommerce-service
    environment:
      # 外部API配置
      - MONGODB_URI=${MONGODB_URI}
      - R2_ACCESS_KEY=${R2_ACCESS_KEY}
      - R2_SECRET_KEY=${R2_SECRET_KEY}
      - R2_BUCKET=${R2_BUCKET}
      - R2_ENDPOINT=${R2_ENDPOINT}
      # 内部配置
      - NODE_ENV=production
      - PORT=5004
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-auto-generated-jwt-secret}
      - PRODUCT_CACHE_TTL=300
    depends_on:
      - redis
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 192M

  # 支付服务
  payment-service:
    image: ${DOCKER_REGISTRY:-your-registry}/baidaohui-payment-service:${IMAGE_TAG:-latest}
    container_name: payment-service
    environment:
      # 外部API配置
      - MONGODB_URI=${MONGODB_URI}
      # 内部配置
      - NODE_ENV=production
      - PORT=5005
      - JWT_SECRET=${JWT_SECRET:-auto-generated-jwt-secret}
      - FRONTEND_URL=https://baidaohui.com
      - FORTUNE_SERVICE_URL=http://216.144.233.104:5007
      # Stripe密钥从MongoDB动态读取
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # 邀请服务
  invite-service:
    image: ${DOCKER_REGISTRY:-your-registry}/baidaohui-invite-service:${IMAGE_TAG:-latest}
    container_name: invite-service
    environment:
      # 外部API配置
      - MONGODB_URI=${MONGODB_URI}
      # 内部配置
      - NODE_ENV=production
      - PORT=5006
      - JWT_SECRET=${JWT_SECRET:-auto-generated-jwt-secret}
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 192M
        reservations:
          memory: 96M

  # 密钥管理服务
  key-service:
    image: ${DOCKER_REGISTRY:-your-registry}/baidaohui-key-service:${IMAGE_TAG:-latest}
    container_name: key-service
    environment:
      # 外部API配置
      - MONGODB_URI=${MONGODB_URI}
      # 内部配置
      - NODE_ENV=production
      - PORT=5007
      - JWT_SECRET=${JWT_SECRET:-auto-generated-jwt-secret}
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 192M
        reservations:
          memory: 96M

  # 静态API缓存服务
  static-api-service:
    image: ${DOCKER_REGISTRY:-your-registry}/baidaohui-static-api-service:${IMAGE_TAG:-latest}
    container_name: static-api-service
    environment:
      # 外部API配置
      - MONGODB_URI=${MONGODB_URI}
      - R2_ACCESS_KEY=${R2_ACCESS_KEY}
      - R2_SECRET_KEY=${R2_SECRET_KEY}
      - R2_BUCKET=${R2_BUCKET}
      - R2_ENDPOINT=${R2_ENDPOINT}
      # 内部配置
      - NODE_ENV=production
      - PORT=5008
      - REDIS_URL=redis://redis:6379
      - CACHE_TTL=300
      - MEMORY_LIMIT=128
    depends_on:
      - redis
    networks:
      - baidaohui-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  redis_data: 